// SPDX-License-Identifier: MIT
pragma solidity 0.8.15;

// import "../ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol";
import "@openzeppelin/contracts/access/AccessControlEnumerable.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/utils/Strings.sol";

/**
 * @dev {ERC721} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - a pauser role that allows to stop all token transfers
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 *
 * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._
 */
contract TrackTheMythPass is
    Context,
    AccessControlEnumerable,
    ERC721Enumerable,
    ERC721Burnable,
    ERC721Pausable,
    ERC721Royalty
{
    using Counters for Counters.Counter;
    using Strings for uint256;

    uint256 private _cap;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");

    Counters.Counter private _tokenIdTracker;

    string private _baseTokenURI;
    string private _baseExtension;

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor(
        uint256 cap_,
        string memory baseTokenURI,
        string memory baseExtension,
        address _owner,
        address _royaltyWallet
    ) ERC721("Track The Myth Pass", "TTM Pass") {
        require(cap_ > 0, "ERC721Capped: cap is 0");

        _cap = cap_;
        _baseTokenURI = baseTokenURI;
        _baseExtension = baseExtension;

        _setupRole(DEFAULT_ADMIN_ROLE, _owner);

        _setupRole(MINTER_ROLE, _owner);
        _setupRole(PAUSER_ROLE, _owner);
        _setupRole(ADMIN_ROLE, _owner);
        _setDefaultRoyalty(_royaltyWallet, 600);
    }

    //====================Administrative Functions====================//

    function setCap(uint256 cap_) external {
        require(
            hasRole(ADMIN_ROLE, _msgSender()),
            "ERC721PresetMinterPauserAutoId: must have admin role to mint"
        );

        require(totalSupply() < cap_, "Cap should be greater than totalsupply");
        _cap = cap_;
    }

    // feeNumerator is in basis points so 10000 = 100% , 100 = 1% etc
    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external {
        require(
            hasRole(ADMIN_ROLE, _msgSender()),
            "ERC721PresetMinterPauserAutoId: must have admin role to mint"
        );
        _setDefaultRoyalty(receiver, feeNumerator);
    }

    // feeNumerator is in basis points so 10000 = 100% , 100 = 1% etc
    function setTokenRoyalty(
        uint256 tokenId,
        address receiver,
        uint96 feeNumerator
    ) external {
        require(
            hasRole(ADMIN_ROLE, _msgSender()),
            "ERC721PresetMinterPauserAutoId: must have admin role to mint"
        );
        _setTokenRoyalty(tokenId, receiver, feeNumerator);
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address to) public virtual {
        require(
            hasRole(MINTER_ROLE, _msgSender()),
            "ERC721PresetMinterPauserAutoId: must have minter role to mint"
        );
        require(totalSupply() + 1 <= cap(), "ERC721Capped: cap exceeded");

        // We cannot just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        _mint(to, _tokenIdTracker.current());
        _tokenIdTracker.increment();
    }

    function batchMint(address to, uint16 quantity) public virtual {
        require(
            hasRole(ADMIN_ROLE, _msgSender()),
            "ERC721PresetMinterPauserAutoId: must have admin role to mint"
        );
        for (uint16 index = 0; index < quantity; index++) {
            require(totalSupply() + 1 <= cap(), "ERC721Capped: cap exceeded");

            // We cannot just use balanceOf to create the new tokenId because tokens
            // can be burned (destroyed), so we need a separate counter.
            _mint(to, _tokenIdTracker.current());
            _tokenIdTracker.increment();
        }
    }

    /**
     * @dev Pauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function pause() public virtual {
        require(
            hasRole(PAUSER_ROLE, _msgSender()),
            "ERC721PresetMinterPauserAutoId: must have pauser role to pause"
        );
        _pause();
    }

    /**
     * @dev Unpauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function unpause() public virtual {
        require(
            hasRole(PAUSER_ROLE, _msgSender()),
            "ERC721PresetMinterPauserAutoId: must have pauser role to unpause"
        );
        _unpause();
    }

    function setBaseExtension(string memory baseExtension) public {
        require(hasRole(ADMIN_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have admin role");

        _baseExtension = baseExtension;
    }

    //====================Administrative Functions End====================//

    // This function helps opensea to read the contract metadata
    function contractURI() public view returns (string memory) {
        return string(abi.encodePacked(_baseURI(), "contract.json"));
    }

    function tokenURI(uint256 _tokenId) public view override returns(string memory) {
        require(_exists(_tokenId), 'Token Id Does not exist');
        return string(abi.encodePacked(_baseURI(), _tokenId.toString(), _baseExtension));
    }

    /**
     * @dev Returns the cap on the token's total supply.
     */
    function cap() public view virtual returns (uint256) {
        return _cap;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(
            AccessControlEnumerable,
            ERC721,
            ERC721Enumerable,
            ERC721Royalty
        )
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {ERC721-_burn}. This override additionally clears the royalty information for the token.
     */
    function _burn(uint256 tokenId)
        internal
        virtual
        override(ERC721, ERC721Royalty)
    {
        super._burn(tokenId);
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }
}
